// t·∫°o array
let numbers = [];

// h·∫ßm th√™m number
function addNumber() {
  const numberInput = document.getElementById("numberInput");
  const number = numberInput.value.trim();

  if (isValidInteger(number)) {
    numbers.push(parseInt(number));
    displayNumbers();
  } else {
    alert("Kh√¥ng ph·∫£i s·ªë nguy√™n");
  }

  console.log("üöÄ ~ numbers:", numbers);
}

// h√†m ki·ªÉm tra ph·∫£i l√† s·ªë nguy√™n
function isValidInteger(value) {
  const parsed = parseInt(value);
  return !isNaN(parsed) && parsed.toString() === value;
}

// h√†m hi·ªÉn th·ªã number
function displayNumbers() {
  const numbersList = document.getElementById("numbersList");
  numbersList.innerHTML = `${numbers.join(", ")}`;
}

// b√†i 1 t√≠nh t·ªïng s·ªë nguy√™n d∆∞∆°ng

function sumPositiveInteger() {
  let sumInteger = 0;
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] >= 0) {
      sumInteger = sumInteger + numbers[i];
    }
  }
  displaySumPositiveIntegerResult(sumInteger);
}
// h√†m hi·ªÉn th·ªã result
function displaySumPositiveIntegerResult(sumInteger) {
  const showSumResult = document.getElementById("sumPositiveIntegerResult");
  showSumResult.innerHTML = `T·ªïng s·ªë d∆∞∆°ng: ${sumInteger}`;
}

//  end b√†i 1

// b√†i 2

// h√†m ƒë·∫øm s·ªë d∆∞∆°ng
function countPositiveInteger() {
  let count = 0;
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] > 0) {
      count++;
    }
  }

  displayCountPositiveIntegerResult(count);
}

// h√†m hi·ªÉn th·ªã result
function displayCountPositiveIntegerResult(count) {
  const showResult = document.getElementById("countPositiveIntegerResult");
  showResult.innerHTML = `S·ªë d∆∞∆°ng: ${count}`;
}

//end b√†i 2

// b√†i 3

// h√†m t√¨m s·ªë nh·ªè nh·∫•t
function findSmallestNumber() {
  let smallestNumber = numbers[0];
  for (let i = 1; i < numbers.length; i++) {
    if (numbers[i] < smallestNumber) {
      smallestNumber = numbers[i];
    }
  }
  displayFindSmallestNumberResult(smallestNumber);
}
// h√†m hi·ªÉn th·ªã result
function displayFindSmallestNumberResult(smallestNumber) {
  const showResult = document.getElementById("findSmallestNumberResult");
  showResult.innerHTML = `S·ªë nh·ªè nh·∫•t: ${smallestNumber}`;
}
// end b√†i 3

//  b√†i 4

//  h√†m t·∫°o m·∫£ng s·ªë d∆∞∆°ng m·ªõi
function arrayPositiveInteger() {
  //  m·∫£ng m·ªõi ch·ª©a c√°c s·ªë d∆∞∆°ng
  let positiveNumbers = [];

  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] > 0) {
      positiveNumbers.push(numbers[i]);
    }
  }
  return positiveNumbers;
}

// h√†m t√¨m s·ªë nguy√™n d∆∞∆°ng nh·ªè nh√°t
function findSmallestPositiveInteger() {
  // t·∫°o m·∫£ng s√≥ d∆∞∆°ng
  let positiveNumbers = arrayPositiveInteger();

  // Ki·ªÉm tra m·∫£ng m·ªõi c√≥ ph·∫ßn t·ª≠ hay kh√¥ng
  if (positiveNumbers.length === 0) {
    return (document.getElementById(
      "findSmallestPositiveIntegerResult"
    ).innerHTML = "Kh√¥ng c√≥ s·ªë d∆∞∆°ng trong m·∫£ng");
  }

  // T√¨m gi√° tr·ªã d∆∞∆°ng nh·ªè nh·∫•t trong m·∫£ng m·ªõi
  let smallestPositive = positiveNumbers[0];
  for (let i = 1; i < positiveNumbers.length; i++) {
    if (positiveNumbers[i] < smallestPositive) {
      smallestPositive = positiveNumbers[i];
    }
  }

  displayFindSmallestPositiveIntegerResult(smallestPositive);
}

// h√†m hi·ªÉn th·ªã result
function displayFindSmallestPositiveIntegerResult(smallestPositive) {
  const showResult = document.getElementById(
    "findSmallestPositiveIntegerResult"
  );
  showResult.innerHTML = `S·ªë d∆∞∆°ng nh·ªè nh·∫•t: ${smallestPositive}`;
}

// end b√†i 4

// b√†i 5

// h√†m t√¨m s·ªë ch·∫µn cu·ªëi c√πng
function findEvenNumber() {
  let evenNumber = 0;

  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] % 2 == 0) {
      evenNumber = numbers[i];
    }
  }
  displayFindEvenNumberResult(evenNumber);
}

// h√†m hi·ªÉn th·ªã result
function displayFindEvenNumberResult(evenNumber) {
  const showResult = document.getElementById("findEvenNumberResult");
  showResult.innerHTML = `S·ªë ch·∫µn cu·ªëi c√πng: ${evenNumber}`;
}

// end b√†i 5
// b√†i 6
function transpositionNumber() {
  let numberTemp = numbers;
  let index1 = document.getElementById("index1").value;
  let index2 = document.getElementById("index2").value;

  index1 = parseInt(index1);
  index2 = parseInt(index2);

  let temp = numberTemp[index1];
  numberTemp[index1] = numberTemp[index2];
  numberTemp[index2] = temp;

  displayTranspositionNumberResult(numberTemp);
}

// h√†m hi·ªÉn th·ªã result
function displayTranspositionNumberResult(numberTemp) {
  const showResult = document.getElementById("transpositionNumberResult");
  showResult.innerHTML = `M√£ng sau khi ƒë·ªïi: ${numberTemp}`;
}

// end bai 6

// b√†i 7

function sortArray() {
  let numberTemp = numbers;
  numberTemp.sort((a, b) => a - b);

  displaySortArrayResult(numberTemp);
}

// h√†m hi·ªÉn th·ªã result
function displaySortArrayResult(numberTemp) {
  const showResult = document.getElementById("sortArrayResult");
  showResult.innerHTML = `M√£ng sau khi s·∫Øp x·∫øp: ${numberTemp}`;
}

//  end b√†i 7

// b√†i 8

// H√†m ki·ªÉm tra s·ªë nguy√™n t·ªë
function isPrime(num) {
  if (num <= 1) return false;
  if (num <= 3) return true;

  if (num % 2 === 0 || num % 3 === 0) return false;

  for (let i = 5; i * i <= num; i += 6) {
    if (num % i === 0 || num % (i + 2) === 0) return false;
  }

  return true;
}

function findFirstPrime() {
  let firstPrime = null;

  for (let i = 0; i < numbers.length; i++) {
    if (isPrime(numbers[i])) {
      firstPrime = numbers[i];
      break;
    }
  }
  if (firstPrime == null) {
    return (document.getElementById("findFirstPrimeResult").innerHTML =
      "Kh√¥ng c√≥ s·ªë nguy√™n t·ªë");
  }

  displayFirstPrimeResult(firstPrime);
}

// h√†m hi·ªÉn th·ªã result
function displayFirstPrimeResult(prime) {
  const showResult = document.getElementById("findFirstPrimeResult");
  showResult.innerHTML = ` ${prime}`;
}

// end bai 8

//  b·∫£i 9

// t·∫°o array
let numbers9 = [];

// h·∫ßm th√™m number
function addNumber9() {
  const numberInput = document.getElementById("numberInput9").value;
  const number = parseFloat(numberInput);
  if (numberInput.trim() !== "") {
    numbers9.push(number);
  }

  displayNumbers9();
  console.log("üöÄ ~ numbers9:", numbers9);
}

// h√†m hi·ªÉn th·ªã number
function displayNumbers9() {
  const numbersList = document.getElementById("numbersList9");
  numbersList.innerHTML = `${numbers9.join(", ")}`;
}

//  h√†m ƒë·∫øm s·ªë nguy√™n
function countIntegers() {
  let count = 0;

  for (let i = 0; i < numbers9.length; i++) {
    if (Number.isInteger(numbers9[i])) {
      count++;
    }
  }

  // h√†m display
  displayCountIntegersResult(count);
}

// h√†m hi·ªÉn th·ªã result
function displayCountIntegersResult(count) {
  const showResult = document.getElementById("countIntegersResult");
  showResult.innerHTML = ` ${count}`;
}
// end bai 9

// ba√¨ 10

// h√†m ki·ªÉm tra s·ªë √¢m s·ªë d∆∞∆°ng
function countNegativePositive() {
  let negativeCount = 0;
  let positiveCount = 0;
  let comparisonResult = "";

  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] < 0) {
      negativeCount++;
    } else if (numbers[i] > 0) {
      positiveCount++;
    }
  }

  // so s√°nh s·ªë √¢m s·ªë d∆∞∆°ng
  if (negativeCount > positiveCount) {
    comparisonResult = "S·ªë √¢m >  s·ªë d∆∞∆°ng.";
  } else if (negativeCount < positiveCount) {
    comparisonResult = "S·ªë d∆∞∆°ng > s·ªë √¢m.";
  } else {
    comparisonResult = "S·ªë √¢m v√† s·ªë d∆∞∆°ng b·∫±ng nhau.";
  }

  // display
  displayCountNegativePositiveResult(comparisonResult);
}

// h√†m hi·ªÉn th·ªã result
function displayCountNegativePositiveResult(comparisonResult) {
  const showResult = document.getElementById("countNegativePositiveResult");
  showResult.innerHTML = ` ${comparisonResult}`;
}
